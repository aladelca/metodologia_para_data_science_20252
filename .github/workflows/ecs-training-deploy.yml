name: Build and Deploy Training Service

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  ECS_CONTAINER_NAME: ${{ secrets.ECS_CONTAINER_NAME }}
  ECS_NETWORK_CONFIGURATION: ${{ secrets.ECS_NETWORK_CONFIGURATION }}
  TRIGGER_TRAINING_TASK: ${{ secrets.TRIGGER_TRAINING_TASK }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build \
            -t "$ECR_REGISTRY/${ECR_REPOSITORY}:$IMAGE_TAG" \
            -t "$ECR_REGISTRY/${ECR_REPOSITORY}:latest" \
            .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push "$ECR_REGISTRY/${ECR_REPOSITORY}:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/${ECR_REPOSITORY}:latest"

      - name: Prepare task definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/${ECR_REPOSITORY}:$IMAGE_TAG"
          aws ecs describe-task-definition \
            --task-definition "$ECS_TASK_DEFINITION" \
            --query 'taskDefinition' \
            --output json > task-definition.json

          cat task-definition.json \
            | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            | jq --arg IMAGE "$IMAGE_URI" --arg NAME "$ECS_CONTAINER_NAME" \
                '.containerDefinitions |= map(if .name == $NAME then .image = $IMAGE else . end)' \
            > task-definition-updated.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition-updated.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "TASK_DEFINITION_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy new task definition
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "$TASK_DEFINITION_ARN" \
            --force-new-deployment

      - name: Trigger ad-hoc training task (optional)
        if: env.TRIGGER_TRAINING_TASK == 'true'
        run: |
          if [ -z "$ECS_NETWORK_CONFIGURATION" ]; then
            echo "ECS_NETWORK_CONFIGURATION secret must be set to run the task" >&2
            exit 1
          fi

          aws ecs run-task \
            --cluster "$ECS_CLUSTER" \
            --launch-type FARGATE \
            --task-definition "$TASK_DEFINITION_ARN" \
            --network-configuration "$ECS_NETWORK_CONFIGURATION"
