name: Build and Deploy Lambda Predict

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  LAMBDA_ECR_REPOSITORY: ${{ secrets.LAMBDA_ECR_REPOSITORY }}
  LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image (Lambda)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build \
            -f Dockerfile.predict \
            -t "$ECR_REGISTRY/${LAMBDA_ECR_REPOSITORY}:$IMAGE_TAG" \
            -t "$ECR_REGISTRY/${LAMBDA_ECR_REPOSITORY}:latest" \
            .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push "$ECR_REGISTRY/${LAMBDA_ECR_REPOSITORY}:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/${LAMBDA_ECR_REPOSITORY}:latest"

      - name: Update Lambda function to new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/${LAMBDA_ECR_REPOSITORY}:$IMAGE_TAG"
          aws lambda update-function-code \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --image-uri "$IMAGE_URI"

      - name: Publish new version and update alias (optional)
        if: ${{ !!secrets.LAMBDA_ALIAS }}
        run: |
          VERSION=$(aws lambda publish-version --function-name "$LAMBDA_FUNCTION_NAME" --query 'Version' --output text)
          aws lambda update-alias \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --name "${{ secrets.LAMBDA_ALIAS }}" \
            --function-version "$VERSION"
